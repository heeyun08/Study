import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

class Canvas(QLabel):
    def __init__(self, size):
        super().__init__()

        self.count = 0

        self.size = size
        self.setPixmap(QPixmap(*size))
        self.setFixedSize(*size)

        self.pencolor = Qt.black
        self.penbtn = QPushButton('색상', self)
        self.penbtn.resize(50, 50)
        self.penbtn.move(200, 20)
        self.penbtn.clicked.connect(self.showColorDlg)

        self.brushcolor = Qt.white
        self.btnFill = QPushButton('도형 채우기', self)
        self.btnFill.resize(100, 50)
        self.btnFill.move(550, 20)
        self.btnFill.clicked.connect(self.showColorDlg)

        self.bkBrushcolor = Qt.white
        self.btnBkcolor = QPushButton('배경 색상', self)
        self.btnBkcolor.resize(80, 50)
        self.btnBkcolor.move(460, 20)
        self.btnBkcolor.clicked.connect(self.showColorDlg)
 
        self.cb = QComboBox(self)
        self.cb.move(1220, 50)
 
        for i in range(1, 11):
            self.cb.addItem(str(i))

        self.begin = QPoint()
        self.end = QPoint()

        # 그림판 초기화
        self.clear_canvas()
        self.initBtn()

    # 그림 그릴 곳을 하얀색으로 칠하기
    def clear_canvas(self):
        painter = QPainter(self.pixmap())
        painter.setBrush(self.bkBrushcolor)
        painter.drawRect(-100, -100, self.size[0]+100, self.size[1]+100)
        painter.end()
    
    def initBtn(self):
        btnPen = QPushButton('pen', self)
        btnPen.resize(50, 50)
        btnPen.move(20, 20)
        btnPen.clicked.connect(self.BtnClickedPen)

        btnRect = QPushButton('사각형', self)
        btnRect.resize(50, 50)
        btnRect.move(80, 20)
        btnRect.clicked.connect(self.BtnClikcedRect)

        btnCircle = QPushButton('원', self)
        btnCircle.resize(50, 50)
        btnCircle.move(140, 20)
        btnCircle.clicked.connect(self.BtnClickedCircle)

        btnErase = QPushButton('지우개', self)
        btnErase.resize(50, 50)
        btnErase.move(260, 20)
        btnErase.clicked.connect(self.mouseMoveEvent)

        btnLoad = QPushButton('불러오기', self)
        btnLoad.resize(70, 50)
        btnLoad.move(320, 20)
        btnLoad.clicked.connect(self.LoadImg)

        btnSave = QPushButton('저장', self)
        btnSave.resize(50, 50)
        btnSave.move(400, 20)
        btnSave.clicked.connect(self.mouseMoveEvent)

        btnThick = QPushButton('두께', self)
        btnThick.resize(50, 50)
        btnThick.move(660, 20)
        btnThick.clicked.connect(self.mouseMoveEvent)        

        label = QLabel('선굵기', self)
        label.resize(50, 30)
        label.move(1220, 10)

    def showColorDlg(self):

        # 색상 대화상자 생성      
        color = QColorDialog.getColor()

        sender = self.sender()

        if sender == self.penbtn and color.isValid():
            self.pencolor = color
            # print(color.name())

        elif sender == self.btnBkcolor and color.isValid():
            self.bkBrushcolor = color
            self.brushcolor = color
            self.clear_canvas()

        else:
            self.brushcolor = color

    def BtnClickedPen(self):
        self.mouseMoveEvent = self.mouseMoveEventPen

    def BtnClikcedRect(self):
        self.mouseMoveEvent = self.mouseMoveEventRect

    def BtnClickedCircle(self):
        self.mouseMoveEvent = self.mouseMoveEventCircle

    def mouseMoveEvent(self, e):
        pass

    def mousePressEvent(self, e):
        self.begin = e.pos()
        self.update

    # 마우스가 눌린 상태에서 움직이면 발생
    def mouseMoveEventPen(self, e):
        painter = QPainter(self.pixmap())
        painter.setPen(QPen(self.pencolor, self.cb.currentIndex()))
        painter.drawLine(self.begin, e.pos())
        self.begin = e.pos()
        painter.end()
        
        # QLabel을 업데이트 해주는 함수
        self.repaint()

    def mouseMoveEventRect(self, e):
        self.count = 1
        t_pixmap = self.pixmap()
        t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
        Square = QPainter(self.pixmap())
        Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
        Square.setBrush(QColor(self.brushcolor))
        Square.drawRect(QRect(self.begin, e.pos()))
        Square.end()
        self.repaint()
        self.setPixmap(t_pixmap)

    def mouseMoveEventCircle(self, e):
        self.count = 2
        t_pixmap = self.pixmap()
        t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
        Square = QPainter(self.pixmap())
        Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
        Square.setBrush(QColor(self.brushcolor))
        Square.drawEllipse(QRect(self.begin, e.pos()))
        Square.end()
        self.repaint()
        self.setPixmap(t_pixmap)

    def mouseReleaseEvent(self, e):
        if self.count == 1:
            Square = QPainter(self.pixmap())
            Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
            Square.setBrush(QColor(self.brushcolor))
            Square.drawRect(QRect(self.begin, e.pos()))
            Square.end()
            self.repaint()

        elif self.count == 2:
            Circle = QPainter(self.pixmap())
            Circle.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
            Circle.setBrush(QColor(self.brushcolor))
            Circle.drawEllipse(QRect(self.begin, e.pos()))
            Circle.end()
            self.repaint()

    def LoadImg(self):
        fname, _ = QFileDialog.getOpenFileName(self, 'Open file', QDir.currentPath())
        qPixmapVar = self.pixmap()
        qPixmapVar.load(fname[0])
        self.repaint()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        self.Canvas = Canvas((1280, 720))
        self.setFixedSize(1280, 720)
        
        self.setCentralWidget(self.Canvas)
        self.setWindowTitle('Drawing Board')
        self.show()

if __name__ == "__main__":
    app = QApplication([])
    w = MainWindow()
    app.exec_()
