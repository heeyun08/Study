import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

class Canvas(QLabel):
    def __init__(self, size):
        super().__init__()

        self.count = 0
        self.erasercolor = Qt.white

        self.size = size
        self.setPixmap(QPixmap(*size))
        self.setFixedSize(*size)

        self.pencolor = Qt.black
        self.penbtn = QPushButton('색상', self)
        self.penbtn.resize(70, 30)
        self.penbtn.move(280, 0)
        self.penbtn.setStyleSheet('background:white')
        self.penbtn.clicked.connect(self.showColorDlg)

        self.brushcolor = Qt.white
        self.btnFill = QPushButton('도형 채우기', self)
        self.btnFill.resize(100, 30)
        self.btnFill.move(490, 0)
        self.btnFill.setStyleSheet('background:white')
        self.btnFill.clicked.connect(self.showColorDlg)

        self.bkBrushcolor = Qt.white
        self.btnBkcolor = QPushButton('배경 색상', self)
        self.btnBkcolor.resize(80, 30)
        self.btnBkcolor.move(590, 0)
        self.btnBkcolor.setStyleSheet('background:white')
        self.btnBkcolor.clicked.connect(self.showColorDlg)
 
        self.cb = QComboBox(self)
        self.cb.resize(70, 30)
        self.cb.move(1190, 50)
        self.cb.setStyleSheet('background:white')
 
        for i in range(1, 11):
            self.cb.addItem(str(i))

        self.begin = QPoint()
        self.end = QPoint()

        self.ImgLabel = QLabel(self)
        self.ImgLabel.move(0, 50)

        # 그림판 초기화
        self.clear_canvas()
        self.initBtn()

    # 그림 그릴 곳을 하얀색으로 칠하기
    def clear_canvas(self):
        painter = QPainter(self.pixmap())
        painter.setBrush(self.bkBrushcolor)
        painter.drawRect(-100, -100, self.size[0]+100, self.size[1]+100)
        painter.end()
    
    def initBtn(self):
        btnPen = QPushButton('pen', self)
        btnPen.resize(70, 30)
        btnPen.move(0, 0)
        btnPen.setStyleSheet('background:white')
        btnPen.clicked.connect(self.BtnClickedPen)

        btnRect = QPushButton('사각형', self)
        btnRect.resize(70, 30)
        btnRect.move(70, 0)
        btnRect.setStyleSheet('background:white')
        btnRect.clicked.connect(self.BtnClikcedRect)

        btnCircle = QPushButton('원', self)
        btnCircle.resize(70, 30)
        btnCircle.move(140, 0)
        btnCircle.setStyleSheet('background:white')
        btnCircle.clicked.connect(self.BtnClickedCircle)

        btnLine = QPushButton('직선', self)
        btnLine.resize(70, 30)
        btnLine.move(210, 0)
        btnLine.setStyleSheet('background:white')
        btnLine.clicked.connect(self.BtnClickedLine)

        btnLoad = QPushButton('불러오기', self)
        btnLoad.resize(70, 30)
        btnLoad.move(350, 0)
        btnLoad.setStyleSheet('background:white')
        btnLoad.clicked.connect(self.LoadImg)

        btnSave = QPushButton('저장', self)
        btnSave.resize(70, 30)
        btnSave.move(420, 0)
        btnSave.setStyleSheet('background:white')
        btnSave.clicked.connect(self.SaveImg)

        btnErase = QPushButton('지우개', self)
        btnErase.resize(60, 30)
        btnErase.move(670, 0)
        btnErase.setStyleSheet('background:white')
        btnErase.clicked.connect(self.BtnClickedEraser)     

        btnClear = QPushButton('전체 지우기', self)
        btnClear.resize(90, 30)
        btnClear.move(730, 0)
        btnClear.setStyleSheet('background:white')
        btnClear.clicked.connect(self.BtnClickedClear) 

        label = QLabel('선굵기', self)
        label.resize(60, 30)
        label.move(1195, 10)
        label.setStyleSheet('background:white')
        font = label.font()
        font.setBold(True)
        font.setPointSize(10)
        label.setFont(font)

    def showColorDlg(self):

        # 색상 대화상자 생성      
        color = QColorDialog.getColor()

        sender = self.sender()

        if sender == self.penbtn and color.isValid():
            self.pencolor = color
            # print(color.name())

        elif sender == self.btnBkcolor and color.isValid():
            t_pixmap = self.pixmap()
            t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
            t_pixmap.fill(color)
            self.bkBrushcolor = color
            self.erasercolor = color
            self.setPixmap(t_pixmap)

        else:
            self.brushcolor = color

    def BtnClickedClear(self):
        self.clear_canvas()
        self.repaint()

    def BtnClickedPen(self):
        self.mouseMoveEvent = self.mouseMoveEventPen

    def BtnClikcedRect(self):
        self.mouseMoveEvent = self.mouseMoveEventRect

    def BtnClickedCircle(self):
        self.mouseMoveEvent = self.mouseMoveEventCircle

    def BtnClickedLine(self):
        self.mouseMoveEvent = self.mouseMoveEventLine

    def BtnClickedEraser(self):
        self.mouseMoveEvent = self.mouseMoveEventEraser

    def mouseMoveEvent(self, e):
        pass

    def mousePressEvent(self, e):
        self.begin = e.pos()
        self.update

    # 곡선 그리기
    def mouseMoveEventPen(self, e):
        painter = QPainter(self.pixmap())
        painter.setPen(QPen(self.pencolor, self.cb.currentIndex()))
        painter.drawLine(self.begin, e.pos())
        self.begin = e.pos()
        painter.end()
        self.repaint()

    # 지우개
    def mouseMoveEventEraser(self, e):
        self.pencolor = self.erasercolor
        eraser = QPainter(self.pixmap())
        eraser.setPen(QPen(QColor(self.erasercolor), 10))
        eraser.drawLine(self.begin, e.pos())
        self.begin = e.pos()
        eraser.end()
        self.repaint()

    def mouseMoveEventRect(self, e):
        self.count = 1
        t_pixmap = self.pixmap()
        t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
        Square = QPainter(self.pixmap())
        Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
        Square.setBrush(QColor(self.brushcolor))
        Square.drawRect(QRect(self.begin, e.pos()))
        Square.end()
        self.repaint()
        self.setPixmap(t_pixmap)

    def mouseMoveEventCircle(self, e):
        self.count = 2
        t_pixmap = self.pixmap()
        t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
        Square = QPainter(self.pixmap())
        Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
        Square.setBrush(QColor(self.brushcolor))
        Square.drawEllipse(QRect(self.begin, e.pos()))
        Square.end()
        self.repaint()
        self.setPixmap(t_pixmap)

    def mouseMoveEventLine(self, e):
        self.count = 3
        t_pixmap = self.pixmap()
        t_pixmap = t_pixmap.copy(0, 0, t_pixmap.width(), t_pixmap.height())
        Line = QPainter(self.pixmap())
        Line.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
        Line.drawLine(self.begin, e.pos())
        Line.end()
        self.repaint()
        self.setPixmap(t_pixmap)

    def mouseReleaseEvent(self, e):
        if self.count == 1:
            Square = QPainter(self.pixmap())
            Square.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
            Square.setBrush(QColor(self.brushcolor))
            Square.drawRect(QRect(self.begin, e.pos()))
            Square.end()
            self.repaint()

        elif self.count == 2:
            Circle = QPainter(self.pixmap())
            Circle.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
            Circle.setBrush(QColor(self.brushcolor))
            Circle.drawEllipse(QRect(self.begin, e.pos()))
            Circle.end()
            self.repaint()

        elif self.count == 3:
            Line = QPainter(self.pixmap())
            Line.setPen(QPen(QColor(self.pencolor), self.cb.currentIndex()))
            Line.drawLine(self.begin, e.pos())
            Line.end()
            self.repaint()

    def LoadImg(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file')

        if fname[0]:
            pixmap = QPixmap(fname[0])

            self.ImgLabel.setPixmap(pixmap)
            self.ImgLabel.resize(pixmap.width(), pixmap.height())

            self.show()

    def SaveImg(self):
        fname = QFileDialog.getSaveFileName(self, 'Save Image', '', "PNG(*.png);;JPEG(*.jpg *.jpeg);;All Files(*.*) ")

        self.pixmap().save(fname[0])

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        
        self.Canvas = Canvas((1280, 720))
        self.setFixedSize(1280, 720)
        
        self.setCentralWidget(self.Canvas)
        self.setWindowTitle('Drawing Board')
        self.show()

if __name__ == "__main__":
    app = QApplication([])
    w = MainWindow()
    app.exec_()
